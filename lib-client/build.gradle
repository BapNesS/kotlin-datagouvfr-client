plugins {
    id 'com.android.library'
    id 'kotlin-android'
    id 'org.jetbrains.kotlin.plugin.serialization' version '1.5.20'
    id 'org.sonarqube' version '3.3'

    id("org.jetbrains.dokka") version "1.5.30"
}

android {
    compileSdk 31

    defaultConfig {
        minSdk 26
        targetSdk 31
        versionCode rootProject.versionCode
        versionName rootProject.versionName

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        consumerProguardFiles "consumer-rules.pro"
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    kotlinOptions {
        jvmTarget = '1.8'
    }
}

dependencies {

    testImplementation 'junit:junit:4.+'
    androidTestImplementation 'androidx.test.ext:junit:1.1.3'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation "io.ktor:ktor-serialization:1.6.2"
    implementation "io.ktor:ktor-client-core:1.6.2"
    implementation "io.ktor:ktor-client-cio:1.6.2"
    implementation "io.ktor:ktor-client-json:1.6.2"
    implementation "io.ktor:ktor-client-serialization:1.6.2"
    implementation "io.ktor:ktor-client-logging:1.6.2"
    implementation "io.ktor:ktor-client-android:1.6.2"
    implementation "org.jetbrains.kotlinx:kotlinx-datetime:0.2.1"

    dokkaHtmlPlugin("org.jetbrains.dokka:kotlin-as-java-plugin:1.5.30")
}

sonarqube {
    properties {
        property "sonar.projectKey", "com.baptistecarlier.kotlin.datagouvfr:datagouvfr-client"
        property "sonar.organization", "kotlin-datagouvfr"
        property "sonar.host.url", "https://sonarcloud.io"
        property "sonar.projectVersion", rootProject.versionCode
    }
}

// Publishing
apply plugin: 'maven-publish'
apply plugin: 'signing'

publishing {
    publications {
        release(MavenPublication) {
            groupId LIB_GROUP_ID
            artifactId LIB_ARTIFACT_ID
            version rootProject.versionName
            artifact("$buildDir/outputs/aar/${project.archivesBaseName}-release.aar")
            artifact("$buildDir/publications/release/pom-default.xml.asc")

            pom {
                name = POM_NAME
                description = POM_DESCRIPTION
                packaging = POM_PACKAGING
                url = POM_URL

                licenses {
                    license {
                        name = POM_LICENCE_NAME
                        url = POM_LICENCE_URL
                        distribution = POM_LICENCE_DIST
                    }
                }
                developers {
                    developer {
                        id = POM_DEVELOPER_ID
                        name = POM_DEVELOPER_NAME
                        url = POM_DEVELOPER_URL
                    }
                }
                scm {
                    url = POM_SCM_URL
                    connection = POM_SCM_CONNECTION
                    developerConnection = POM_SCM_DEV_CONNECTION
                }
                // A slightly hacky fix so that the POM will include transitive dependencies
                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    project.configurations.implementation.allDependencies.each {
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', it.group)
                        dependencyNode.appendNode('artifactId', it.name)
                        dependencyNode.appendNode('version', it.version)
                    }
                }
            }
        }
    }
    repositories {
        maven {
            def releasesRepoUrl = "https://s01.oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsRepoUrl = "https://s01.oss.sonatype.org/content/repositories/snapshots/"
            url = rootProject.versionName.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
            credentials {
                username findProperty("ossrhUsername")
                password findProperty("ossrhPassword")
            }
        }
    }
}

signing {
    ext."signing.keyId" = findProperty("signing.keyId")
    ext."signing.secretKeyRingFile" = findProperty("signing.secretKeyRingFile")
    ext."signing.password" = findProperty("signing.password")
    sign publishing.publications
}
